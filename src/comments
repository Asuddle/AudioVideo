 // clickVideo=()=> {
    //     // console.log('paused',this.player.paused())
    //     // if(!this.player.paused()){
    //         let time=this.player.duration()
    //         this.setState({time:this.player.duration})
    //             this.props.getDuration(time)
    //     // }
    // }







// onPlay={this.clickVideo}

// onClick={this.clickVideo}

// clickVideo=()=> {
//     // console.log('paused',this.player.paused())
//     // if(!this.player.paused()){
//         let time=this.player.duration()
//         this.setState({time:this.player.duration})
//             this.props.getDuration(time)
//     // }
// }
// var isPlaying = this.player.currentTime > 0 && !this.player.paused && !this.player.ended
//     && this.player.readyState > 2;


// this.player = videojs(this.videoNode,this.props, function onPlayerReady() {
//     console.log('onPlayerReady', this)
// });

// componentWillReceiveProps(newProps) {
//
//         if(this.props.plugins.offset.start!==newProps.plugins.offset.start
//             ||newProps.plugins.offset.end!==this.props.plugins.offset.end){
//             this.player._offsetStart=newProps.plugins.offset.start
//             this.player._offsetEnd=newProps.plugins.offset.end
//         }
//         console.log('check',this.props.currentTime[0])
//         this.player.currentTime(Math.floor(this.props.currentTime[0]))
//         if (typeof newProps.sources[0] === "undefined") {
//             this.setState({video: false})
//         } else {
//             this.setState({video:true})
//             this.player.src({
//                 type: newProps.sources[0].type,
//                 src: newProps.sources[0].src
//             });
//             console.log('newprops',newProps)
//         this.player.pause();
//     }
//   }










{/*<div  style={{width: '500px',height:'70px'}}>*/}
{/*    <SliderControl domain={domain}*/}
{/*                    UpdateOffset={UpdateOffset}*/}
{/*    />*/}
{/*</div>*/}
{/*}*/}



{/*<div style={{ height: 150, width: '100%' }}>*/}
{/*    <Slider*/}
{/*        mode={1}*/}
{/*        step={domain[1]/20}*/}
{/*        domain={domain}*/}
{/*        reversed={reversed}*/}
{/*        rootStyle={sliderStyle}*/}
{/*        onUpdate={onUpdate}*/}
{/*        onChange={onChange}*/}
{/*        values={values}*/}
{/*    >*/}
{/*        <Rail>*/}
{/*            {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}*/}
{/*        </Rail>*/}
{/*        <Handles>*/}
{/*            {({ handles, getHandleProps }) => (*/}
{/*                <div className="slider-handles">*/}
{/*                    {handles.map(handle => (*/}
{/*                        <Handle*/}
{/*                            key={handle.id}*/}
{/*                            handle={handle}*/}
{/*                            domain={domain}*/}
{/*                            getHandleProps={getHandleProps}*/}
{/*                        />*/}
{/*                    ))}*/}
{/*                </div>*/}
{/*            )}*/}
{/*        </Handles>*/}
{/*        <Tracks left={false} right={false}>*/}
{/*            {({ tracks, getTrackProps }) => (*/}
{/*                <div className="slider-tracks">*/}
{/*                    {tracks.map(({ id, source, target }) => (*/}
{/*                        <Track*/}
{/*                            key={id}*/}
{/*                            source={source}*/}
{/*                            target={target}*/}
{/*                            getTrackProps={getTrackProps}*/}
{/*                        />*/}
{/*                    ))}*/}
{/*                </div>*/}
{/*            )}*/}
{/*        </Tracks>*/}
{/*        <Ticks count={10}>*/}
{/*            {*/}
{/*                ({ ticks }) => (*/}
{/*                <div className="slider-ticks">*/}
{/*                    {ticks.map(tick => (*/}
{/*                        <Tick key={tick.id} tick={tick} count={ticks.length} />*/}
{/*                    ))}*/}
{/*                </div>*/}
{/*            )}*/}
{/*        </Ticks>*/}
{/*    </Slider>*/}
{/*</div>*/}



// <button onClick={() => handleDomain([100, 400])}>
// SET DOMAIN [100, 400]
// </button>
// <button onClick={() => handleDomain([300, 600])}>
//     SET DOMAIN [300, 600]
// </button>
// <button onClick={() => this.toggleReverse()}>
// {reversed ? 'DISPLAY LOW TO HIGH' : 'DISPLAY HIGH TO LOW'}
// </button>


